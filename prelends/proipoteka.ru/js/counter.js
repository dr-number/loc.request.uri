setTimeout(function () {

  (function () {
    getResource('/json/metrik/metrics.json')
      .then(data => createViewCounter(data))
      .catch(err => console.log(err));
  }());

  async function getResource(url) {
    const res = await fetch(url);

    if (!res.ok) { // –Ω–µ 200
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ${url}, —Å—Ç–∞—Ç—É—Å: ${res.status}`);
    }
    const result = await res.json();
    return result;
  }

  function createViewCounter(metrikaResponse) {

    const locationUrl = window.location.pathname; // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π URL –±–µ–∑ –¥–æ–º–µ–Ω–∞ –∏ http

    let patern = 'effeminate-beacon.000webhostapp.com';
    let summCountPeople = 0;

    if (locationUrl.slice(-1) == '/') {
      patern += locationUrl.substring(0, locationUrl.length - 1);
    }

    const data = metrikaResponse['data'];
    let str;

    data.forEach(function (item) {
      str = item['dimensions'][0]['name'];

      if (patern.indexOf(str)) {
        summCountPeople += item['metrics'][0];
      }
    });
    let countElem = document.createElement('span'); // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    countElem.className = 'countPeople';
    countElem.innerHTML = 'üëÅ' + summCountPeople;

    let view_counter = document.getElementById('view_counter');

    if (summCountPeople > 0) { // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω—É–ª—è
      view_counter.appendChild(countElem);
    }

  };

}, 1000);